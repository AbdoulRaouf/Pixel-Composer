function Panel_L_System() : PanelContent() constructor {
	title = "Lindenmayer System";
	w = ui(640);
	h = ui(480);
	
	data = 
@"Lindenmayer Systems is a system of drawing line using simple string. The line is drawn from a pointer (sometime called a turtle). The pointer is controlled by a rule containing letters or symbols.
## Symbols

{g}
<x20> [F] <x40> Move forward and draw a line
<x20> [G] <x40> Move forward without drawing a line
<x20> [+] <x40> Rotate to the left
<x20> [-] <x40> Rotate to the right
<x20> [[] <x40> Save current state in a stack.
<x20> []] <x40> Restore state from the top of the stack.
<x20> [*] <x40> Rotate the secondary angle positively (3D).
<x20> [/] <x40> Rotate the secondary angle negatively (3D).
{g}

Move distance and turn angle are fixed.
## Rules Generation
Rules are generated by repeatedly replace a letter with another letter(s). For example.

{g}
<x20> [X]                    <x88> Starting rule
<x20> [X <x36> <sarrow> FX]  <x88> Replace X by FX
<x20> [F <x36> <sarrow> X+F] <x88> Replace F by X+F
{g}

Applying these rules the first time we will get:

{g}
<x20> [X]  <x88> Starting rule
<x20> [FX] <x88> Apply the first rule replacing X with FX
{g}

The second iteration will be:

{g}
<x20> [FX]     <x88> Result from the first iteration
<x20> F [FX]   <x88> Applying the first rule replacing X with FX
<x20> [X+F] FX <x88> Applying the second rule replacing F with X+F
{g}

Notice that both rules are being applied at the same time, thus the seconds rule won't replace the letter replaced by the first rule. 
By repeating these operations many times we can construct more complex rule.
## Random Rules
You can also apply multiple rules to the same letter to randomize rule selection.

{g}
<x20> [X <x36> <sarrow> F+X] <x88> Replace X by F+X
<x20> [X <x36> <sarrow> F-X] <x88> Replace X by F-X
{g}

These rules caused every X to has 50% chance to become F+X and 50% chance to become F-X.";

	dataMd = markdown_parse(data);
	
	panel_width   = w - padding * 2;
	panel_height  = h - padding * 2;
	
	sp_note = new scrollPane(panel_width, panel_height, function(_y, _m) {
		draw_clear_alpha(COLORS.dialog_splash_badge, 1);
		
		var xx = ui(8);
		var yy = ui(8) + _y;
		var ww = sp_note.surface_w - ui(16);
		var hh = markdown_draw(dataMd, xx, yy, ww);
		
		return hh + ui(64);
	});
	
	function drawContent(panel) {
			
		panel_width   = w - padding * 2;
		panel_height  = h - padding * 2;
		
		var px = padding;
		var py = padding;
		var pw = panel_width;
		var ph = panel_height;
		
		draw_sprite_stretched(THEME.ui_panel_bg, 1, px - ui(8), py - ui(8), pw + ui(16), ph + ui(16));
		sp_note.verify(panel_width, panel_height);
		sp_note.setFocusHover(pFOCUS, pHOVER);
		sp_note.drawOffset(px, py, mx, my);
		
	}
}